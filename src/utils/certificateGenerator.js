// src/utils/certificateGenerator.js - Generador de certificados en PDF
import jsPDF from 'jspdf';

/**
 * Genera un certificado en PDF usando la imagen de fondo personalizada
 * @param {Object} certificateData - Datos del certificado
 * @param {string} certificateData.userName - Nombre completo del usuario
 * @param {string} certificateData.jamName - Nombre de la game jam
 * @param {string} certificateData.category - Categor√≠a del certificado
 * @param {boolean} certificateData.isWinner - Si es certificado de reconocimiento
 * @param {Date} certificateData.date - Fecha de emisi√≥n
 * @param {string} certificateData.certificateId - ID √∫nico del certificado
 * @param {string} [certificateData.gameName] - Nombre del juego (opcional, para reconocimientos)
 * @param {string} [certificateData.theme] - Tema de la jam (opcional)
 * @param {string} [certificateData.customTitle] - T√≠tulo personalizado
 * @param {string} [certificateData.customSubtitle] - Subt√≠tulo personalizado
 * @param {string} [certificateData.customMainText] - Contenido personalizado
 * @param {string} [certificateData.customSignature] - Firma personalizada
 * @param {string} backgroundImageUrl - URL de la imagen de fondo
 */

/**
 * Detecta si un certificado es de reconocimiento basado en m√∫ltiples criterios
 */

const isRecognitionCertificate = (certificateData) => {
  // Lista de categor√≠as que son reconocimientos
  const recognitionCategories = [
    'originality', 'creativity', 'narrative', 'aesthetics', 'sound',
    'Originalidad', 'Creatividad', 'Narrativa', 'Narrativa/Concepto', 
    'Est√©tica/Arte', 'Direcci√≥n de Arte', 'Sonido/M√∫sica', 'M√∫sica y Sonido'
  ];
  
  // Es reconocimiento si:
  // 1. isWinner es true, O
  // 2. La categor√≠a est√° en la lista de reconocimientos, O  
  // 3. Tiene gameName (indicativo de reconocimiento)
  return certificateData.isWinner === true ||
         recognitionCategories.includes(certificateData.category) ||
         (certificateData.gameName && certificateData.category !== 'participation' && certificateData.category !== 'Participaci√≥n');
};

/**
 * Informaci√≥n espec√≠fica para cada categor√≠a de reconocimiento (√öNICA FUNCI√ìN)
 */
const getCategoryRecognitionInfo = (category) => {
  // Mapear categor√≠as en espa√±ol a ingl√©s
  const categoryMap = {
    'Originalidad': 'originality',
    'Creatividad': 'creativity', 
    'Narrativa': 'narrative',
    'Narrativa/Concepto': 'narrative',
    'Est√©tica/Arte': 'aesthetics',
    'Direcci√≥n de Arte': 'aesthetics',
    'Sonido/M√∫sica': 'sound',
    'M√∫sica y Sonido': 'sound'
  };
  
  const normalizedCategory = categoryMap[category] || category || 'originality';
  
  const categoryInfo = {
    'originality': {
      emoji: 'üèÜ',
      title: 'Originalidad',
      introText: 'Este certificado reconoce al juego:',
      description: [
        'Por destacarse en su enfoque √∫nico, inesperado o fuera de lo com√∫n.',
        '',
        'Cuando todos pensaban en una cosa, este equipo fue por otra.',
        'Porque la originalidad no se fuerza, se nota.'
      ]
    },
    'creativity': {
      emoji: 'üé®',
      title: 'Creatividad',
      introText: 'Se otorga al juego:',
      description: [
        'Por su capacidad para imaginar lo improbable y hacerlo jugable.',
        'Creatividad no es solo tener ideas... es convertirlas en una experiencia inolvidable.',
        '',
        'Gracias por demostrar que no hay l√≠mites cuando se trata de crear.'
      ]
    },
    'narrative': {
      emoji: 'üìñ',
      title: 'Narrativa',
      introText: 'Reconociendo al juego:',
      description: [
        'Por construir una historia que atrap√≥, emocion√≥ o hizo pensar.',
        '',
        'La narrativa no siempre necesita palabras,',
        'y este juego lo entendi√≥ perfectamente.'
      ]
    },
    'aesthetics': {
      emoji: 'üé®',
      title: 'Direcci√≥n de Arte',
      introText: 'Otorgado al juego:',
      description: [
        'Por su identidad visual fuerte, coherente y con car√°cter.',
        'Colores, formas, estilo‚Ä¶ todo encaj√≥ para crear una est√©tica inolvidable.',
        '',
        'Una oda a los pixeles bien puestos (o mal puestos, con intenci√≥n).'
      ]
    },
    'sound': {
      emoji: 'üéµ',
      title: 'M√∫sica y Sonido',
      introText: 'En reconocimiento al juego:',
      description: [
        'Por su ambientaci√≥n sonora envolvente, composiciones memorables',
        'o simplemente por hacer que se nos pegara un tema.',
        '',
        'Cuando el audio no acompa√±a: conduce.'
      ]
    }
  };
  
  return categoryInfo[normalizedCategory] || categoryInfo['originality'];
};

/**
 * Funci√≥n corregida para generar nombre del archivo
 */
export const generateCertificatePDF = async (certificateData, backgroundImageUrl) => {
  try {
    // Crear nuevo PDF en formato horizontal (landscape)
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4'
    });

    // Dimensiones del PDF (A4 horizontal: 297x210mm)
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    // Si se proporciona imagen de fondo, cargarla
    if (backgroundImageUrl) {
      await loadBackgroundImage(pdf, backgroundImageUrl, pageWidth, pageHeight);
    } else {
      // Fondo de respaldo si no hay imagen
      createFallbackBackground(pdf, pageWidth, pageHeight, certificateData.isWinner);
    }

    // Agregar texto sobre la imagen
    addCertificateText(pdf, certificateData, pageWidth, pageHeight);

    // CORRECCI√ìN: Generar nombre de archivo m√°s descriptivo
    const isRecognition = isRecognitionCertificate(certificateData);
    const typePrefix = isRecognition ? 'reconocimiento' : 'participacion';
    
    // Limpiar categor√≠a para nombre de archivo
    let categoryPart = '';
    if (certificateData.category && certificateData.category !== 'participation') {
      categoryPart = `-${certificateData.category.toLowerCase()
        .replace(/[^a-z0-9]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '')}`;
    }
    
    const userName = certificateData.userName
      .replace(/\s+/g, '-')
      .toLowerCase()
      .replace(/[^a-z0-9-]/g, '');
    
    const fileName = `certificado-${typePrefix}${categoryPart}-${userName}.pdf`;

    console.log('Generated file name:', fileName);

    // Descargar el PDF
    pdf.save(fileName);

  } catch (error) {
    console.error('Error generating certificate PDF:', error);
    throw new Error('Error al generar el certificado. Intenta de nuevo.');
  }
};

/**
 * Carga la imagen de fondo en el PDF
 */
const loadBackgroundImage = async (pdf, imageUrl, pageWidth, pageHeight) => {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = 'anonymous';
    
    img.onload = () => {
      try {
        // Agregar imagen como fondo, ocupando toda la p√°gina
        pdf.addImage(img, 'PNG', 0, 0, pageWidth, pageHeight);
        resolve();
      } catch (error) {
        console.error('Error adding background image:', error);
        reject(error);
      }
    };
    
    img.onerror = () => {
      console.warn('Could not load background image, using fallback');
      resolve(); // Continuar sin imagen de fondo
    };
    
    img.src = imageUrl;
  });
};

/**
 * Crea un fondo de respaldo si no se puede cargar la imagen
 */
const createFallbackBackground = (pdf, pageWidth, pageHeight, isWinner) => {
  // Fondo degradado simulado
  if (isWinner) {
    // Fondo dorado para reconocimientos
    pdf.setFillColor(255, 215, 0);
  } else {
    // Fondo azul para participaci√≥n
    pdf.setFillColor(59, 130, 246);
  }
  
  pdf.rect(0, 0, pageWidth, pageHeight, 'F');
  
  // Agregar patr√≥n decorativo b√°sico
  pdf.setFillColor(255, 255, 255, 0.1);
  for (let i = 0; i < 20; i++) {
    const x = Math.random() * pageWidth;
    const y = Math.random() * pageHeight;
    const size = Math.random() * 10 + 5;
    pdf.circle(x, y, size, 'F');
  }
};

/**
 * FUNCI√ìN 1: Reemplaza addCertificateText (l√≠nea ~178)
 */
const addCertificateText = (pdf, certificateData, pageWidth, pageHeight) => {
  const centerX = pageWidth / 2;
  
  // Configurar fuente
  pdf.setFont('helvetica');
  
  console.log('Certificate generation data:', {
    category: certificateData.category,
    isWinner: certificateData.isWinner,
    gameName: certificateData.gameName,
    customTitle: certificateData.customTitle,
    isRecognition: isRecognitionCertificate(certificateData)
  });
  
  // Verificar si es un certificado personalizado (Manual Certificate Creator)
  if (certificateData.customTitle || certificateData.customMainText) {
    addCustomCertificateText(pdf, certificateData, pageWidth, pageHeight, centerX);
  } 
  // Verificar si es certificado de reconocimiento usando la nueva funci√≥n
  else if (isRecognitionCertificate(certificateData)) {
    addRecognitionCertificateText(pdf, certificateData, pageWidth, pageHeight, centerX);
  } else {
    // Certificado de participaci√≥n por defecto
    addParticipationCertificateText(pdf, certificateData, pageWidth, pageHeight, centerX);
  }
  
  // Informaci√≥n inferior com√∫n
  addFooterInfo(pdf, certificateData, pageWidth, pageHeight);
};

/**
 * Agrega texto para certificados personalizados
 */
const addCustomCertificateText = (pdf, certificateData, pageWidth, pageHeight, centerX) => {
  let yPosition = 30;
  
  // 1. T√≠tulo personalizado
  if (certificateData.customTitle) {
    pdf.setFontSize(24);
    pdf.setTextColor(255, 255, 255);
    pdf.setFont('helvetica', 'bold');
    pdf.text(certificateData.customTitle, centerX, yPosition, { align: 'center' });
    yPosition += 20;
  }
  
  // 2. Subt√≠tulo personalizado
  if (certificateData.customSubtitle) {
    pdf.setFontSize(18);
    pdf.setTextColor(0, 252, 100); // Verde del logo
    pdf.setFont('helvetica', 'bold');
    pdf.text(certificateData.customSubtitle, centerX, yPosition, { align: 'center' });
    yPosition += 20;
  }
  
  // 3. Contenido principal personalizado
  if (certificateData.customMainText) {
    let text = certificateData.customMainText;
    
    // Reemplazar placeholders
    text = text.replace(/\[NOMBRE\]/g, certificateData.userName);
    if (certificateData.gameName) {
      text = text.replace(/\[JUEGO\]/g, certificateData.gameName);
    }
    
    // Dividir en l√≠neas y procesar
    const lines = text.split('\n');
    
    pdf.setFontSize(12);
    pdf.setTextColor(200, 200, 200);
    pdf.setFont('helvetica', 'normal');
    
    lines.forEach((line) => {
      if (line.trim() === '') {
        yPosition += 5; // Espacio para l√≠neas vac√≠as
        return;
      }
      
      // Detectar texto que debe ir en negrita
      if (line.includes('LO LOGRASTE') || 
          line.includes('no se fuerza, se nota') ||
          line.includes('no hay l√≠mites') ||
          line.includes('lo entendi√≥ perfectamente') ||
          line.includes('con intenci√≥n') ||
          line.includes('conduce') ||
          line.match(/\*\*.*\*\*/)) {
        
        // Procesar texto con √©nfasis
        const parts = line.split(/(\*\*.*?\*\*|LO LOGRASTE|no se fuerza, se nota|no hay l√≠mites|lo entendi√≥ perfectamente|con intenci√≥n|conduce)/);
        let xOffset = 0;
        const startX = centerX - (pdf.getTextWidth(line.replace(/\*\*/g, '')) / 2);
        
        parts.forEach(part => {
          if (part.match(/\*\*.*\*\*|LO LOGRASTE|no se fuerza, se nota|no hay l√≠mites|lo entendi√≥ perfectamente|con intenci√≥n|conduce/)) {
            pdf.setFont('helvetica', 'bold');
            pdf.setTextColor(255, 255, 255);
            const cleanText = part.replace(/\*\*/g, '');
            pdf.text(cleanText, startX + xOffset, yPosition);
            xOffset += pdf.getTextWidth(cleanText);
          } else {
            pdf.setFont('helvetica', 'normal');
            pdf.setTextColor(200, 200, 200);
            pdf.text(part, startX + xOffset, yPosition);
            xOffset += pdf.getTextWidth(part);
          }
        });
      } else {
        // Texto normal centrado
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(200, 200, 200);
        pdf.text(line, centerX, yPosition, { align: 'center' });
      }
      
      yPosition += 8;
    });
  }
  
  // 4. Firma personalizada
  if (certificateData.customSignature) {
    yPosition += 10;
    pdf.setFontSize(13);
    pdf.setTextColor(0, 252, 100);
    pdf.setFont('helvetica', 'bold');
    pdf.text(certificateData.customSignature, centerX, yPosition, { align: 'center' });
  }
};

/**
 * Agrega texto para certificados de participaci√≥n
 */
const addParticipationCertificateText = (pdf, certificateData, pageWidth, pageHeight, centerX) => {
  // 1. T√≠tulo "Certificado de Participaci√≥n"
  pdf.setFontSize(24);
  pdf.setTextColor(255, 255, 255);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Certificado de Participaci√≥n', centerX, 30, { align: 'center' });
  
  // 2. Nombre de la jam (destacado)
  pdf.setFontSize(28);
  pdf.setTextColor(0, 252, 100); // Verde del logo
  pdf.setFont('helvetica', 'bold');
  pdf.text(certificateData.jamName, centerX, 50, { align: 'center' });
  
  // 3. "Este certificado se otorga a:"
  pdf.setFontSize(12);
  pdf.setTextColor(220, 220, 220);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Este certificado se otorga a:', centerX, 70, { align: 'center' });
  
  // 4. Nombre del participante (muy destacado)
  pdf.setFontSize(32);
  pdf.setTextColor(255, 255, 255);
  pdf.setFont('helvetica', 'bold');
  
  // Ajustar tama√±o si el nombre es muy largo
  const nameWidth = pdf.getTextWidth(certificateData.userName);
  if (nameWidth > pageWidth - 40) {
    pdf.setFontSize(24);
  }
  
  pdf.text(certificateData.userName, centerX, 90, { align: 'center' });
  
  // 5. P√°rrafo principal (dividido en l√≠neas)
  pdf.setFontSize(12);
  pdf.setTextColor(200, 200, 200);
  pdf.setFont('helvetica', 'normal');
  
  const mainText = [
    'Por haber participado activamente en la creaci√≥n de un videojuego durante',
    'la Game Jam organizada por estudiantes para estudiantes.',
    '',
    'Sabemos que no es f√°cil hacer un juego en pocos d√≠as.',
    'Sabemos que dormir tampoco ayud√≥.',
    'Pero a√∫n as√≠, LO LOGRASTE.'
  ];
  
  let yPosition = 110;
  mainText.forEach((line, index) => {
    if (line === 'Pero a√∫n as√≠, LO LOGRASTE.') {
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(255, 255, 255);
    } else if (line === '') {
      yPosition += 8; // Espacio extra
      return;
    }
    
    pdf.text(line, centerX, yPosition, { align: 'center' });
    yPosition += 8;
    
    // Resetear estilo despu√©s de "LO LOGRASTE"
    if (line === 'Pero a√∫n as√≠, LO LOGRASTE.') {
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(200, 200, 200);
    }
  });
  
  // 6. Despedida
  pdf.setFontSize(11);
  pdf.setTextColor(180, 180, 180);
  pdf.setFont('helvetica', 'italic');
  pdf.text('Con admiraci√≥n y un poquito de envidia,', centerX, yPosition + 15, { align: 'center' });
  
  // 7. Firma de la organizaci√≥n
  pdf.setFontSize(13);
  pdf.setTextColor(0, 252, 100);
  pdf.setFont('helvetica', 'bold');
  pdf.text(`Organizaci√≥n de ${certificateData.jamName}`, centerX, yPosition + 28, { align: 'center' });
};

/**
 * FUNCI√ìN 2: Reemplaza addRecognitionCertificateText (l√≠nea ~440 aprox)
 */
const addRecognitionCertificateText = (pdf, certificateData, pageWidth, pageHeight, centerX) => {
  // Obtener emoji y textos espec√≠ficos por categor√≠a
  const categoryInfo = getCategoryRecognitionInfo(certificateData.category);
  
  // 1. Emoji + T√≠tulo M√ÅS GRANDE
  pdf.setFontSize(22); // Era 20, ahora 22
  pdf.setTextColor(255, 215, 0); // Dorado
  pdf.setFont('helvetica', 'bold');
  pdf.text(`${categoryInfo.emoji} Certificado ‚Äì Menci√≥n Especial a la ${categoryInfo.title}`, centerX, 30, { align: 'center' });
  
  // 2. Texto inicial M√ÅS GRANDE Y EN NEGRITA
  pdf.setFontSize(16); // Era 14, ahora 16
  pdf.setTextColor(220, 220, 220);
  pdf.setFont('helvetica', 'bold'); // Era 'normal', ahora 'bold'
  pdf.text(categoryInfo.introText, centerX, 50, { align: 'center' });
  
  // 3. NOMBRE DEL JUEGO - S√öPER DESTACADO
  const displayName = certificateData.gameName || certificateData.userName;
  
  // Calcular tama√±o din√°mico basado en la longitud del nombre
  let gameNameSize = 40; // Tama√±o base MUY GRANDE (era 28)
  pdf.setFont('helvetica', 'bold');
  
  // Ajustar tama√±o si el nombre es muy largo
  let testWidth = pdf.getTextWidth(displayName);
  while (testWidth > pageWidth - 40 && gameNameSize > 24) {
    gameNameSize -= 2;
    pdf.setFontSize(gameNameSize);
    testWidth = pdf.getTextWidth(displayName);
  }
  
  // Aplicar el tama√±o final
  pdf.setFontSize(gameNameSize);
  pdf.setTextColor(255, 255, 255); // Blanco puro para m√°ximo contraste
  pdf.setFont('helvetica', 'bold');
  
  // Agregar efecto sombra (simulado con texto ligeramente desplazado)
  pdf.setTextColor(0, 0, 0, 0.3); // Sombra sutil
  pdf.text(displayName, centerX + 1, 76, { align: 'center' });
  
  // Texto principal del nombre
  pdf.setTextColor(255, 255, 255);
  pdf.text(displayName, centerX, 75, { align: 'center' });
  
  // 4. AUTOR(ES) - TAMBI√âN M√ÅS GRANDE Y DESTACADO
  let yPosition = 100; // Posici√≥n inicial
  
  if (certificateData.gameName && certificateData.userName) {
    pdf.setFontSize(22); // Mucho m√°s grande que antes (era 16)
    pdf.setTextColor(255, 215, 0); // Dorado para destacar
    pdf.setFont('helvetica', 'bold');
    
    // Agregar sombra sutil para el nombre del autor
    pdf.setTextColor(0, 0, 0, 0.2);
    pdf.text(`Creado por: ${certificateData.userName}`, centerX + 1, 101, { align: 'center' });
    
    // Texto principal del autor
    pdf.setTextColor(255, 215, 0);
    pdf.text(`Creado por: ${certificateData.userName}`, centerX, 100, { align: 'center' });
    
    yPosition = 125; // Ajustar posici√≥n para el resto del contenido
  }
  
  // 5. Contenido espec√≠fico de la categor√≠a - M√ÅS GRANDE Y EN NEGRITA
  pdf.setFontSize(14); // Era 12, ahora 14
  pdf.setTextColor(220, 220, 220);
  pdf.setFont('helvetica', 'bold'); // Era 'normal', ahora 'bold'
  
  // Dividir description en l√≠neas y procesar cada una
  categoryInfo.description.forEach((line, index) => {
    if (line === '') {
      return;
    }
    
    // Texto destacado o normal
    if (line.includes('no se fuerza, se nota') || 
        line.includes('no hay l√≠mites') || 
        line.includes('lo entendi√≥ perfectamente') ||
        line.includes('con intenci√≥n') ||
        line.includes('conduce')) {
      pdf.setFontSize(16); // Tama√±o especial para frases destacadas
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(255, 255, 255);
    } else {
      pdf.setFontSize(14); // Tama√±o normal (m√°s grande que antes)
      pdf.setFont('helvetica', 'bold'); // Mantener negrita
      pdf.setTextColor(200, 200, 200);
    }
    
    pdf.text(line, centerX, yPosition + (index * 10), { align: 'center' }); // Espaciado aumentado de 8 a 10
  });
  
  // 6. Firma de la organizaci√≥n - M√ÅS GRANDE
  pdf.setFontSize(15); // Era 13, ahora 15
  pdf.setTextColor(0, 252, 100);
  pdf.setFont('helvetica', 'bold');
  pdf.text(certificateData.jamName, centerX, yPosition + 50, { align: 'center' });
};

// ===================================================================
// ALTERNATIVA: Versi√≥n con estilo m√°s dram√°tico (opcional)
// ===================================================================

const addRecognitionCertificateTextDramatic = (pdf, certificateData, pageWidth, pageHeight, centerX) => {
  const categoryInfo = getCategoryRecognitionInfo(certificateData.category);
  
  // 1. T√≠tulo con m√°s impacto
  pdf.setFontSize(24);
  pdf.setTextColor(255, 215, 0);
  pdf.setFont('helvetica', 'bold');
  pdf.text(`${categoryInfo.emoji} CERTIFICADO DE RECONOCIMIENTO`, centerX, 25, { align: 'center' });
  
  // Subt√≠tulo de categor√≠a
  pdf.setFontSize(18);
  pdf.setTextColor(255, 255, 255);
  pdf.text(`Menci√≥n Especial a la ${categoryInfo.title}`, centerX, 40, { align: 'center' });
  
  // 2. NOMBRE DEL JUEGO - S√öPER DESTACADO
  const displayName = certificateData.gameName || certificateData.userName;
  
  // Marco decorativo alrededor del nombre (opcional)
  pdf.setDrawColor(255, 215, 0);
  pdf.setLineWidth(2);
  const frameWidth = Math.min(pageWidth - 60, pdf.getTextWidth(displayName) + 40);
  pdf.rect(centerX - frameWidth/2, 52, frameWidth, 35, 'S');
  
  // Nombre del juego con tama√±o m√°ximo
  let gameNameSize = 42;
  pdf.setFont('helvetica', 'bold');
  
  let testWidth = pdf.getTextWidth(displayName);
  while (testWidth > pageWidth - 80 && gameNameSize > 20) {
    gameNameSize -= 2;
    pdf.setFontSize(gameNameSize);
    testWidth = pdf.getTextWidth(displayName);
  }
  
  pdf.setFontSize(gameNameSize);
  
  // Triple efecto: sombra, outline, texto principal
  // Sombra
  pdf.setTextColor(0, 0, 0, 0.5);
  pdf.text(displayName, centerX + 2, 72, { align: 'center' });
  
  // Outline (simulado)
  pdf.setTextColor(255, 215, 0);
  pdf.text(displayName, centerX + 1, 71, { align: 'center' });
  pdf.text(displayName, centerX - 1, 71, { align: 'center' });
  pdf.text(displayName, centerX, 72, { align: 'center' });
  pdf.text(displayName, centerX, 70, { align: 'center' });
  
  // Texto principal
  pdf.setTextColor(255, 255, 255);
  pdf.text(displayName, centerX, 71, { align: 'center' });
  
  // 3. AUTOR(ES) con estilo especial
  let yPosition = 95;
  
  if (certificateData.gameName && certificateData.userName) {
    pdf.setFontSize(20);
    pdf.setTextColor(255, 215, 0);
    pdf.setFont('helvetica', 'bold');
    
    // Decoraci√≥n antes del nombre
    pdf.text('‚òÖ ‚òÖ ‚òÖ', centerX, yPosition, { align: 'center' });
    yPosition += 15;
    
    pdf.setFontSize(24);
    pdf.setTextColor(255, 255, 255);
    pdf.text(`CREADO POR: ${certificateData.userName.toUpperCase()}`, centerX, yPosition, { align: 'center' });
    
    yPosition += 15;
    pdf.setFontSize(20);
    pdf.setTextColor(255, 215, 0);
    pdf.text('‚òÖ ‚òÖ ‚òÖ', centerX, yPosition, { align: 'center' });
    
    yPosition += 20;
  }
  
  // Resto del contenido similar...
  pdf.setFontSize(14);
  pdf.setTextColor(220, 220, 220);
  pdf.setFont('helvetica', 'bold');
  
  categoryInfo.description.forEach((line, index) => {
    if (line === '') return;
    
    if (line.includes('no se fuerza, se nota') || 
        line.includes('no hay l√≠mites') || 
        line.includes('lo entendi√≥ perfectamente') ||
        line.includes('con intenci√≥n') ||
        line.includes('conduce')) {
      pdf.setFontSize(16);
      pdf.setTextColor(255, 255, 255);
    } else {
      pdf.setFontSize(14);
      pdf.setTextColor(200, 200, 200);
    }
    
    pdf.text(line, centerX, yPosition + (index * 10), { align: 'center' });
  });
  
  // Firma final
  pdf.setFontSize(16);
  pdf.setTextColor(0, 252, 100);
  pdf.setFont('helvetica', 'bold');
  pdf.text(certificateData.jamName, centerX, yPosition + 55, { align: 'center' });
};

/**
 * Agrega informaci√≥n del footer (fecha, tema, ID)
 */
const addFooterInfo = (pdf, certificateData, pageWidth, pageHeight) => {
  const bottomY = pageHeight - 25;
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.setTextColor(160, 160, 160);
  
  // Fecha (izquierda)
  const dateText = `Fecha: ${certificateData.date.toLocaleDateString('es-ES')}`;
  pdf.text(dateText, 20, bottomY);
  
  // ID del certificado (derecha)
  const idText = `ID: ${certificateData.certificateId}`;
  pdf.text(idText, pageWidth - 20, bottomY, { align: 'right' });
};

/**
 * Funci√≥n auxiliar para cargar imagen desde URL y convertir a base64
 */
export const loadImageAsBase64 = (url) => {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.crossOrigin = 'anonymous';
    
    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      
      try {
        const dataURL = canvas.toDataURL('image/png');
        resolve(dataURL);
      } catch (error) {
        reject(error);
      }
    };
    
    img.onerror = () => reject(new Error('Failed to load image'));
    img.src = url;
  });
};

/**
 * Funci√≥n principal para generar certificado con imagen personalizada
 */
export const generateCertificateWithCustomBackground = async (certificateData) => {
  try {
    // URL de tu imagen de fondo (deber√°s subirla a tu proyecto)
    // Puedes ponerla en public/images/ y referenciarla as√≠:
    const backgroundImageUrl = '/images/certificate-background.png';
    
    await generateCertificatePDF(certificateData, backgroundImageUrl);
  } catch (error) {
    console.error('Error generating certificate with custom background:', error);
    // Fallback: generar sin imagen de fondo
    await generateCertificatePDF(certificateData, null);
  }
};

// Funci√≥n helper para preparar datos de certificado
export const prepareCertificateData = (certificate, userProfile) => {
  return {
    userName: userProfile?.fullName || 'Participante',
    jamName: certificate.jamName,
    category: certificate.category,
    isWinner: certificate.isWinner,
    date: certificate.awardedDate,
    certificateId: certificate.id,
    gameName: certificate.gameName || null,
    theme: certificate.theme || null,
    // Campos personalizados
    customTitle: certificate.customTitle || null,
    customSubtitle: certificate.customSubtitle || null,
    customMainText: certificate.customMainText || null,
    customSignature: certificate.customSignature || null
  };
};